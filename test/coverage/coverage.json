{
  "instrumentation": "node-jscoverage",
  "sloc": 120,
  "hits": 110,
  "misses": 10,
  "coverage": 91.66666666666666,
  "files": [
    {
      "filename": "c:/Work/sellside/strings/lib/index.js",
      "coverage": 78.57142857142857,
      "hits": 22,
      "misses": 6,
      "sloc": 28,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Sellside",
          "coverage": ""
        },
        "3": {
          "source": " *",
          "coverage": ""
        },
        "4": {
          "source": " * Sellside <http://www.sellside.com>",
          "coverage": ""
        },
        "5": {
          "source": " * Created and maintained by Jon Schlinkert and Brian Woodward",
          "coverage": ""
        },
        "6": {
          "source": " *",
          "coverage": ""
        },
        "7": {
          "source": " * Copyright (c) 2013 Sellside.",
          "coverage": ""
        },
        "8": {
          "source": " * Licensed under the MIT License (MIT).",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "'use strict';",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "var _ = require('lodash');",
          "coverage": 1
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "var Strings = require('./strings');",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "var _instance = null;",
          "coverage": 1
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "var strings = module.exports = function(structure, data) {",
          "coverage": 1
        },
        "20": {
          "source": "\t_instance = null;",
          "coverage": 19
        },
        "21": {
          "source": "\tstrings.instance();",
          "coverage": 19
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "\tif (data) {",
          "coverage": 19
        },
        "24": {
          "source": "\t  _instance.use(data);",
          "coverage": 0
        },
        "25": {
          "source": "\t}",
          "coverage": ""
        },
        "26": {
          "source": "  _instance.run(structure);",
          "coverage": 19
        },
        "27": {
          "source": "};",
          "coverage": ""
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "strings.instance = function (structure) {",
          "coverage": 1
        },
        "30": {
          "source": "\tif (_instance === null ) {",
          "coverage": 38
        },
        "31": {
          "source": "\t\treturn _instance = new Strings({",
          "coverage": 19
        },
        "32": {
          "source": "\t\t\tstructure: structure",
          "coverage": ""
        },
        "33": {
          "source": "\t\t});",
          "coverage": ""
        },
        "34": {
          "source": "\t}",
          "coverage": ""
        },
        "35": {
          "source": "\treturn _instance;",
          "coverage": 19
        },
        "36": {
          "source": "};",
          "coverage": ""
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "strings.use = function (middleware) {",
          "coverage": 1
        },
        "39": {
          "source": "\treturn strings.instance().use(middleware);",
          "coverage": 0
        },
        "40": {
          "source": "};",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "strings.exclude = function (middleware) {",
          "coverage": 1
        },
        "43": {
          "source": "\treturn strings.instance().exclude(middleware);",
          "coverage": 0
        },
        "44": {
          "source": "};",
          "coverage": ""
        },
        "45": {
          "source": "",
          "coverage": ""
        },
        "46": {
          "source": "strings.context = function () {",
          "coverage": 1
        },
        "47": {
          "source": "\treturn strings.instance().context();",
          "coverage": 0
        },
        "48": {
          "source": "};",
          "coverage": ""
        },
        "49": {
          "source": "",
          "coverage": ""
        },
        "50": {
          "source": "strings.patterns = function () {",
          "coverage": 1
        },
        "51": {
          "source": "\treturn strings.instance().patterns();",
          "coverage": 0
        },
        "52": {
          "source": "};",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "strings.run = function (structure, options) {",
          "coverage": 1
        },
        "55": {
          "source": "\treturn strings.instance().run(structure, options);",
          "coverage": 0
        },
        "56": {
          "source": "};",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "strings.Pattern = require('./pattern');",
          "coverage": 1
        },
        "59": {
          "source": "",
          "coverage": ""
        },
        "60": {
          "source": "// middleware",
          "coverage": ""
        },
        "61": {
          "source": "var middleware = require('./middleware');",
          "coverage": 1
        },
        "62": {
          "source": "_.map(middleware, function(value, key) {",
          "coverage": 1
        },
        "63": {
          "source": "  strings[key] = value;",
          "coverage": 3
        },
        "64": {
          "source": "});",
          "coverage": ""
        }
      }
    },
    {
      "filename": "c:/Work/sellside/strings/lib/middleware/dates.js",
      "coverage": 100,
      "hits": 18,
      "misses": 0,
      "sloc": 18,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Sellside",
          "coverage": ""
        },
        "3": {
          "source": " *",
          "coverage": ""
        },
        "4": {
          "source": " * Sellside <http://www.sellside.com>",
          "coverage": ""
        },
        "5": {
          "source": " * Created and maintained by Jon Schlinkert and Brian Woodward",
          "coverage": ""
        },
        "6": {
          "source": " *",
          "coverage": ""
        },
        "7": {
          "source": " * Copyright (c) 2013 Sellside.",
          "coverage": ""
        },
        "8": {
          "source": " * Licensed under the MIT License (MIT).",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "'use strict';",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "var _s = require('underscore.string');",
          "coverage": 1
        },
        "14": {
          "source": "var moment = require('moment');",
          "coverage": 1
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "var Pattern = require('../pattern');",
          "coverage": 1
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "var slugified = function(str, slugify) {",
          "coverage": 1
        },
        "19": {
          "source": "  return slugify ? _s.slugify(str) : str;",
          "coverage": 39
        },
        "20": {
          "source": "};",
          "coverage": ""
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "var format = function(d, options) {",
          "coverage": 1
        },
        "23": {
          "source": "  moment.lang(options.lang);",
          "coverage": 1
        },
        "24": {
          "source": "  return function(f) {",
          "coverage": 1
        },
        "25": {
          "source": "    return moment(d).format(f);",
          "coverage": 39
        },
        "26": {
          "source": "  };",
          "coverage": ""
        },
        "27": {
          "source": "};",
          "coverage": ""
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "var dates = module.exports = function(d, options) {",
          "coverage": 1
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "  options = options || { slugify: false };",
          "coverage": 1
        },
        "32": {
          "source": "  var slugify = ((typeof options.slugify === 'undefined') || options.slugify === false) ? false : true;",
          "coverage": 1
        },
        "33": {
          "source": "  options.lang = options.lang || 'en';",
          "coverage": 1
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "  var formatter = format(d, options);",
          "coverage": 1
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "  var datePatterns = {",
          "coverage": 1
        },
        "38": {
          "source": "    // Full date",
          "coverage": ""
        },
        "39": {
          "source": "    'date': new Pattern(/:\\bdate\\b/,          slugified(formatter(\"YYYY/MM/DD\"), slugify)),",
          "coverage": ""
        },
        "40": {
          "source": "    // Long date formats",
          "coverage": ""
        },
        "41": {
          "source": "    'L': new Pattern(/:\\bL\\b/,                slugified(formatter(\"MM/DD/YYYY\"), slugify)),",
          "coverage": ""
        },
        "42": {
          "source": "    '1': new Pattern(/:\\b1\\b/,                slugified(formatter(\"M/D/YYYY\"), slugify)),",
          "coverage": ""
        },
        "43": {
          "source": "    // Year (2013, 13)",
          "coverage": ""
        },
        "44": {
          "source": "    'year': new Pattern(/:\\byear\\b/,          slugified(formatter(\"YYYY\"), slugify)),",
          "coverage": ""
        },
        "45": {
          "source": "    'YYYY': new Pattern(/:\\bYYYY\\b/,          slugified(formatter(\"YYYY\"), slugify)),",
          "coverage": ""
        },
        "46": {
          "source": "    'YY': new Pattern(/:\\bYY\\b/,              slugified(formatter(\"YY\"), slugify)),",
          "coverage": ""
        },
        "47": {
          "source": "    // Month name (January, Jan)",
          "coverage": ""
        },
        "48": {
          "source": "    'monthname': new Pattern(/:\\bmonthname\\b/,slugified(formatter(\"MMMM\"), slugify)),",
          "coverage": ""
        },
        "49": {
          "source": "    'MMMM': new Pattern(/:\\bMMMM\\b/,          slugified(formatter(\"MMMM\"), slugify)),",
          "coverage": ""
        },
        "50": {
          "source": "    'MMM': new Pattern(/:\\bMMM\\b/,            slugified(formatter(\"MMM\"), slugify)),",
          "coverage": ""
        },
        "51": {
          "source": "    // Month number (1, 01)",
          "coverage": ""
        },
        "52": {
          "source": "    'month': new Pattern(/:\\bmonth\\b/,        slugified(formatter(\"MM\"), slugify)),",
          "coverage": ""
        },
        "53": {
          "source": "    'MM': new Pattern(/:\\bMM\\b/,              slugified(formatter(\"MM\"), slugify)),",
          "coverage": ""
        },
        "54": {
          "source": "    'mo': new Pattern(/:\\bmo\\b/,              slugified(formatter(\"MM\"), slugify)),",
          "coverage": ""
        },
        "55": {
          "source": "    'M': new Pattern(/:\\bM\\b/,                slugified(formatter(\"M\"), slugify)),",
          "coverage": ""
        },
        "56": {
          "source": "    // Day of the year",
          "coverage": ""
        },
        "57": {
          "source": "    'DDDD': new Pattern(/:\\bDDDD\\b/,          slugified(formatter(\"DDDD\"), slugify)),",
          "coverage": ""
        },
        "58": {
          "source": "    'DDD': new Pattern(/:\\bDDD\\b/,            slugified(formatter(\"DDD\"), slugify)),",
          "coverage": ""
        },
        "59": {
          "source": "    // Day of the month",
          "coverage": ""
        },
        "60": {
          "source": "    'day': new Pattern(/:\\bday\\b/,            slugified(formatter(\"DD\"), slugify)),",
          "coverage": ""
        },
        "61": {
          "source": "    'DD': new Pattern(/:\\bDD\\b/,              slugified(formatter(\"DD\"), slugify)),",
          "coverage": ""
        },
        "62": {
          "source": "    'D': new Pattern(/:\\bD\\b/,                slugified(formatter(\"D\"), slugify)),",
          "coverage": ""
        },
        "63": {
          "source": "    // Day of the week (wednesday/wed)",
          "coverage": ""
        },
        "64": {
          "source": "    'dddd': new Pattern(/:\\bdddd\\b/,          slugified(formatter(\"dddd\"), slugify)),",
          "coverage": ""
        },
        "65": {
          "source": "    'ddd': new Pattern(/:\\bddd\\b/,            slugified(formatter(\"ddd\"), slugify)),",
          "coverage": ""
        },
        "66": {
          "source": "    'dd': new Pattern(/:\\bdd\\b/,              slugified(formatter(\"dd\"), slugify)),",
          "coverage": ""
        },
        "67": {
          "source": "    'd': new Pattern(/:\\bd\\b/,                slugified(formatter(\"d\"), slugify)),",
          "coverage": ""
        },
        "68": {
          "source": "    // Hour",
          "coverage": ""
        },
        "69": {
          "source": "    'hour': new Pattern(/:\\bhour\\b/,          slugified(formatter(\"HH\"), slugify)),",
          "coverage": ""
        },
        "70": {
          "source": "    'HH': new Pattern(/:\\bHH\\b/,              slugified(formatter(\"HH\"), slugify)),",
          "coverage": ""
        },
        "71": {
          "source": "    'H': new Pattern(/:\\bH\\b/,                slugified(formatter(\"H\"), slugify)),",
          "coverage": ""
        },
        "72": {
          "source": "    'hh': new Pattern(/:\\bhh\\b/,              slugified(formatter(\"hh\"), slugify)),",
          "coverage": ""
        },
        "73": {
          "source": "    'h': new Pattern(/:\\bh\\b/,                slugified(formatter(\"h\"), slugify)),",
          "coverage": ""
        },
        "74": {
          "source": "    // Minute",
          "coverage": ""
        },
        "75": {
          "source": "    'minute': new Pattern(/:\\bminute\\b/,      slugified(formatter(\"mm\"), slugify)),",
          "coverage": ""
        },
        "76": {
          "source": "    'min': new Pattern(/:\\bmin\\b/,            slugified(formatter(\"mm\"), slugify)),",
          "coverage": ""
        },
        "77": {
          "source": "    'mm': new Pattern(/:\\bmm\\b/,              slugified(formatter(\"mm\"), slugify)),",
          "coverage": ""
        },
        "78": {
          "source": "    'm': new Pattern(/:\\bm\\b/,                slugified(formatter(\"m\"), slugify)),",
          "coverage": ""
        },
        "79": {
          "source": "    // Second",
          "coverage": ""
        },
        "80": {
          "source": "    'second': new Pattern(/:\\bsecond\\b/,      slugified(formatter(\"ss\"), slugify)),",
          "coverage": ""
        },
        "81": {
          "source": "    'sec': new Pattern(/:\\bsec\\b/,            slugified(formatter(\"ss\"), slugify)),",
          "coverage": ""
        },
        "82": {
          "source": "    'ss': new Pattern(/:\\bss\\b/,              slugified(formatter(\"ss\"), slugify)),",
          "coverage": ""
        },
        "83": {
          "source": "    's': new Pattern(/:\\bs\\b/,                slugified(formatter(\"s\"), slugify)),",
          "coverage": ""
        },
        "84": {
          "source": "    // AM/PM, am/pm",
          "coverage": ""
        },
        "85": {
          "source": "    'A': new Pattern(/:\\bA\\b/,                slugified(formatter(\"A\"), slugify)),",
          "coverage": ""
        },
        "86": {
          "source": "    'a': new Pattern(/:\\ba\\b/,                slugified(formatter(\"a\"), slugify)),",
          "coverage": ""
        },
        "87": {
          "source": "    'P': new Pattern(/:\\bP\\b/,                slugified(formatter(\"P\"), slugify)),",
          "coverage": ""
        },
        "88": {
          "source": "    'p': new Pattern(/:\\bp\\b/,                slugified(formatter(\"p\"), slugify))",
          "coverage": ""
        },
        "89": {
          "source": "  };",
          "coverage": ""
        },
        "90": {
          "source": "",
          "coverage": ""
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "  return function() {",
          "coverage": 1
        },
        "93": {
          "source": "    return datePatterns;",
          "coverage": 40
        },
        "94": {
          "source": "  };",
          "coverage": ""
        },
        "95": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "c:/Work/sellside/strings/lib/middleware/index.js",
      "coverage": 100,
      "hits": 1,
      "misses": 0,
      "sloc": 1,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Sellside",
          "coverage": ""
        },
        "3": {
          "source": " *",
          "coverage": ""
        },
        "4": {
          "source": " * Sellside <http://www.sellside.com>",
          "coverage": ""
        },
        "5": {
          "source": " * Created and maintained by Jon Schlinkert and Brian Woodward",
          "coverage": ""
        },
        "6": {
          "source": " *",
          "coverage": ""
        },
        "7": {
          "source": " * Copyright (c) 2013 Sellside.",
          "coverage": ""
        },
        "8": {
          "source": " * Licensed under the MIT License (MIT).",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "12": {
          "source": "  dates: require('./dates'),",
          "coverage": ""
        },
        "13": {
          "source": "  paths: require('./paths'),",
          "coverage": ""
        },
        "14": {
          "source": "  urls: require('./urls')",
          "coverage": ""
        },
        "15": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "c:/Work/sellside/strings/lib/middleware/paths.js",
      "coverage": 100,
      "hits": 12,
      "misses": 0,
      "sloc": 12,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Sellside",
          "coverage": ""
        },
        "3": {
          "source": " *",
          "coverage": ""
        },
        "4": {
          "source": " * Sellside <http://www.sellside.com>",
          "coverage": ""
        },
        "5": {
          "source": " * Created and maintained by Jon Schlinkert and Brian Woodward",
          "coverage": ""
        },
        "6": {
          "source": " *",
          "coverage": ""
        },
        "7": {
          "source": " * Copyright (c) 2013 Sellside.",
          "coverage": ""
        },
        "8": {
          "source": " * Licensed under the MIT License (MIT).",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "'use strict';",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "var _s = require('underscore.string');",
          "coverage": 1
        },
        "14": {
          "source": "var path = require('path');",
          "coverage": 1
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "var paths = module.exports = function(filePath, options) {",
          "coverage": 1
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "  options = options || { slugify: false };",
          "coverage": 3
        },
        "19": {
          "source": "  var slugify = ((typeof options.slugify !== 'undefined') && options.slugify === false) ? false : true;",
          "coverage": 3
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "  var dir = path.dirname(filePath);",
          "coverage": 3
        },
        "22": {
          "source": "  var ext = path.extname(filePath);",
          "coverage": 3
        },
        "23": {
          "source": "  var filename = path.basename(filePath);",
          "coverage": 3
        },
        "24": {
          "source": "  var basename = path.basename(filePath, ext);",
          "coverage": 3
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "  return function() {",
          "coverage": 3
        },
        "27": {
          "source": "    return {",
          "coverage": 48
        },
        "28": {
          "source": "      basename: slugify ? _s.slugify(basename) : basename,",
          "coverage": ""
        },
        "29": {
          "source": "      filename: slugify ? _s.slugify(filename) : filename,",
          "coverage": ""
        },
        "30": {
          "source": "      ext: slugify ? _s.slugify(ext) : ext,",
          "coverage": ""
        },
        "31": {
          "source": "      dir: slugify ? _s.slugify(dir) : dir",
          "coverage": ""
        },
        "32": {
          "source": "    };",
          "coverage": ""
        },
        "33": {
          "source": "  };",
          "coverage": ""
        },
        "34": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "c:/Work/sellside/strings/lib/middleware/urls.js",
      "coverage": 100,
      "hits": 14,
      "misses": 0,
      "sloc": 14,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Sellside",
          "coverage": ""
        },
        "3": {
          "source": " *",
          "coverage": ""
        },
        "4": {
          "source": " * Sellside <http://www.sellside.com>",
          "coverage": ""
        },
        "5": {
          "source": " * Created and maintained by Jon Schlinkert and Brian Woodward",
          "coverage": ""
        },
        "6": {
          "source": " *",
          "coverage": ""
        },
        "7": {
          "source": " * Copyright (c) 2013 Sellside.",
          "coverage": ""
        },
        "8": {
          "source": " * Licensed under the MIT License (MIT).",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "var _s = require('underscore.string');",
          "coverage": 1
        },
        "11": {
          "source": "var url = require('url');",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "var slugified = function(str, slugify) {",
          "coverage": 1
        },
        "14": {
          "source": "  return slugify ? _s.slugify(str) : str;",
          "coverage": 24
        },
        "15": {
          "source": "};",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "var urls = module.exports = function(str, options) {",
          "coverage": 1
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "  options = options || { slugify: false };",
          "coverage": 2
        },
        "20": {
          "source": "  var slugify = ((typeof options.slugify !== 'undefined') && options.slugify === false) ? false : true;",
          "coverage": 2
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "  var parsed = url.parse(str);",
          "coverage": 2
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "  // TODO: figure out if we need more info here.",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "  return function() {",
          "coverage": 2
        },
        "27": {
          "source": "    var rtn = {};",
          "coverage": 2
        },
        "28": {
          "source": "    for (var key in parsed) {",
          "coverage": 2
        },
        "29": {
          "source": "      if (parsed.hasOwnProperty(key)) {",
          "coverage": 34
        },
        "30": {
          "source": "        rtn[key] = slugified(parsed[key], slugify);",
          "coverage": 24
        },
        "31": {
          "source": "      }",
          "coverage": ""
        },
        "32": {
          "source": "    }",
          "coverage": ""
        },
        "33": {
          "source": "",
          "coverage": ""
        },
        "34": {
          "source": "    return rtn;",
          "coverage": 2
        },
        "35": {
          "source": "  };",
          "coverage": ""
        },
        "36": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "c:/Work/sellside/strings/lib/pattern.js",
      "coverage": 100,
      "hits": 4,
      "misses": 0,
      "sloc": 4,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Sellside",
          "coverage": ""
        },
        "3": {
          "source": " *",
          "coverage": ""
        },
        "4": {
          "source": " * Sellside <http://www.sellside.com>",
          "coverage": ""
        },
        "5": {
          "source": " * Created and maintained by Jon Schlinkert and Brian Woodward",
          "coverage": ""
        },
        "6": {
          "source": " *",
          "coverage": ""
        },
        "7": {
          "source": " * Copyright (c) 2013 Sellside.",
          "coverage": ""
        },
        "8": {
          "source": " * Licensed under the MIT License (MIT).",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "'use strict';",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "var Pattern = module.exports = function(pattern, replacement) {",
          "coverage": 1
        },
        "14": {
          "source": "  this.pattern = pattern;",
          "coverage": 262
        },
        "15": {
          "source": "  this.replacement = replacement;",
          "coverage": 262
        },
        "16": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "c:/Work/sellside/strings/lib/strings.js",
      "coverage": 90.69767441860465,
      "hits": 39,
      "misses": 4,
      "sloc": 43,
      "source": {
        "1": {
          "source": "/**",
          "coverage": ""
        },
        "2": {
          "source": " * Sellside",
          "coverage": ""
        },
        "3": {
          "source": " *",
          "coverage": ""
        },
        "4": {
          "source": " * Sellside <http://www.sellside.com>",
          "coverage": ""
        },
        "5": {
          "source": " * Created and maintained by Jon Schlinkert and Brian Woodward",
          "coverage": ""
        },
        "6": {
          "source": " *",
          "coverage": ""
        },
        "7": {
          "source": " * Copyright (c) 2013 Sellside.",
          "coverage": ""
        },
        "8": {
          "source": " * Licensed under the MIT License (MIT).",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "'use strict';",
          "coverage": 1
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "var _ = require('lodash');",
          "coverage": 1
        },
        "14": {
          "source": "var frep = require('frep');",
          "coverage": 1
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "var Pattern = require('./pattern');",
          "coverage": 1
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "var Strings = module.exports = function (config) {",
          "coverage": 1
        },
        "19": {
          "source": "  this.config = config || {};",
          "coverage": 19
        },
        "20": {
          "source": "  this.options = config.options || {};",
          "coverage": 19
        },
        "21": {
          "source": "  this.structure = config.structure || '';",
          "coverage": 19
        },
        "22": {
          "source": "  this.middleware = config.middleware || [];",
          "coverage": 19
        },
        "23": {
          "source": "};",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "var wrap = function (ctx) {",
          "coverage": 1
        },
        "26": {
          "source": "    return function () {",
          "coverage": 0
        },
        "27": {
          "source": "      return ctx;",
          "coverage": 0
        },
        "28": {
          "source": "    };",
          "coverage": ""
        },
        "29": {
          "source": "  };",
          "coverage": ""
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "var ensureMiddleware = function (middleware) {",
          "coverage": 1
        },
        "32": {
          "source": "  if (_.isFunction(middleware) === false) {",
          "coverage": 98
        },
        "33": {
          "source": "    return wrap(middleware);",
          "coverage": 0
        },
        "34": {
          "source": "  }",
          "coverage": ""
        },
        "35": {
          "source": "  return middleware;",
          "coverage": 98
        },
        "36": {
          "source": "};",
          "coverage": ""
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "var extend = function (middleware) {",
          "coverage": 1
        },
        "39": {
          "source": "    return function (context) {",
          "coverage": 16
        },
        "40": {
          "source": "      return _.extend(context, ensureMiddleware(middleware)());",
          "coverage": 96
        },
        "41": {
          "source": "    };",
          "coverage": ""
        },
        "42": {
          "source": "  };",
          "coverage": ""
        },
        "43": {
          "source": "",
          "coverage": ""
        },
        "44": {
          "source": "var remove = function (middleware) {",
          "coverage": 1
        },
        "45": {
          "source": "    return function (context) {",
          "coverage": 5
        },
        "46": {
          "source": "      return _.omit(context, ensureMiddleware(middleware)());",
          "coverage": 2
        },
        "47": {
          "source": "    };",
          "coverage": ""
        },
        "48": {
          "source": "  };",
          "coverage": ""
        },
        "49": {
          "source": "",
          "coverage": ""
        },
        "50": {
          "source": "Strings.prototype.use = function (middleware) {",
          "coverage": 1
        },
        "51": {
          "source": "  this.middleware.push(extend(middleware));",
          "coverage": 16
        },
        "52": {
          "source": "  return this;",
          "coverage": 16
        },
        "53": {
          "source": "};",
          "coverage": ""
        },
        "54": {
          "source": "",
          "coverage": ""
        },
        "55": {
          "source": "Strings.prototype.exclude = function (middleware) {",
          "coverage": 1
        },
        "56": {
          "source": "  this.middleware.push(remove(middleware));",
          "coverage": 5
        },
        "57": {
          "source": "  return this;",
          "coverage": 5
        },
        "58": {
          "source": "};",
          "coverage": ""
        },
        "59": {
          "source": "",
          "coverage": ""
        },
        "60": {
          "source": "Strings.prototype.context = function () {",
          "coverage": 1
        },
        "61": {
          "source": "  return _.reduce(this.middleware, function (ctx, middleware) {",
          "coverage": 75
        },
        "62": {
          "source": "    return middleware(ctx);",
          "coverage": 98
        },
        "63": {
          "source": "  }, {});",
          "coverage": ""
        },
        "64": {
          "source": "};",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "Strings.prototype.patterns = function () {",
          "coverage": 1
        },
        "67": {
          "source": "  var context = this.context();",
          "coverage": 73
        },
        "68": {
          "source": "  var patterns = _.map(context, function (value, key) {",
          "coverage": 73
        },
        "69": {
          "source": "    if (value instanceof Pattern) {",
          "coverage": 1783
        },
        "70": {
          "source": "      return value;",
          "coverage": 1560
        },
        "71": {
          "source": "    }",
          "coverage": ""
        },
        "72": {
          "source": "    return new Pattern(",
          "coverage": 223
        },
        "73": {
          "source": "    new RegExp(':\\\\b' + key + '\\\\b'), // pattern",
          "coverage": ""
        },
        "74": {
          "source": "    value // replacement",
          "coverage": ""
        },
        "75": {
          "source": "    );",
          "coverage": ""
        },
        "76": {
          "source": "  });",
          "coverage": ""
        },
        "77": {
          "source": "  return patterns;",
          "coverage": 73
        },
        "78": {
          "source": "};",
          "coverage": ""
        },
        "79": {
          "source": "",
          "coverage": ""
        },
        "80": {
          "source": "Strings.prototype.run = function (structure, options) {",
          "coverage": 1
        },
        "81": {
          "source": "  if (_.isPlainObject(structure)) {",
          "coverage": 73
        },
        "82": {
          "source": "    options = structure;",
          "coverage": 0
        },
        "83": {
          "source": "  } else {",
          "coverage": ""
        },
        "84": {
          "source": "    this.structure = structure || this.structure || '';",
          "coverage": 73
        },
        "85": {
          "source": "  }",
          "coverage": ""
        },
        "86": {
          "source": "  return frep.strWithArr(this.structure, this.patterns());",
          "coverage": 73
        },
        "87": {
          "source": "};",
          "coverage": ""
        }
      }
    }
  ],
  "stats": {
    "suites": 12,
    "tests": 64,
    "passes": 64,
    "pending": 0,
    "failures": 0,
    "start": "2014-02-11T22:17:10.146Z",
    "end": "2014-02-11T22:17:10.180Z",
    "duration": 34
  },
  "tests": [
    {
      "title": "should replace :date",
      "fullTitle": "middleware dates should replace :date",
      "duration": 2
    },
    {
      "title": "should replace :date and :ext",
      "fullTitle": "middleware dates should replace :date and :ext",
      "duration": 1
    },
    {
      "title": "should replace :L",
      "fullTitle": "middleware dates should replace :L",
      "duration": 0
    },
    {
      "title": "should replace :1",
      "fullTitle": "middleware dates should replace :1",
      "duration": 1
    },
    {
      "title": "should replace :year",
      "fullTitle": "middleware dates should replace :year",
      "duration": 1
    },
    {
      "title": "should replace :YYYY",
      "fullTitle": "middleware dates should replace :YYYY",
      "duration": 0
    },
    {
      "title": "should replace :YY",
      "fullTitle": "middleware dates should replace :YY",
      "duration": 0
    },
    {
      "title": "should replace :monthname",
      "fullTitle": "middleware dates should replace :monthname",
      "duration": 0
    },
    {
      "title": "should replace :MMMM",
      "fullTitle": "middleware dates should replace :MMMM",
      "duration": 0
    },
    {
      "title": "should replace :MMM",
      "fullTitle": "middleware dates should replace :MMM",
      "duration": 0
    },
    {
      "title": "should replace :month",
      "fullTitle": "middleware dates should replace :month",
      "duration": 0
    },
    {
      "title": "should replace :MM",
      "fullTitle": "middleware dates should replace :MM",
      "duration": 0
    },
    {
      "title": "should replace :mo",
      "fullTitle": "middleware dates should replace :mo",
      "duration": 0
    },
    {
      "title": "should replace :M",
      "fullTitle": "middleware dates should replace :M",
      "duration": 0
    },
    {
      "title": "should replace :DDDD",
      "fullTitle": "middleware dates should replace :DDDD",
      "duration": 0
    },
    {
      "title": "should replace :DDD",
      "fullTitle": "middleware dates should replace :DDD",
      "duration": 1
    },
    {
      "title": "should replace :day",
      "fullTitle": "middleware dates should replace :day",
      "duration": 0
    },
    {
      "title": "should replace :DD",
      "fullTitle": "middleware dates should replace :DD",
      "duration": 0
    },
    {
      "title": "should replace :D",
      "fullTitle": "middleware dates should replace :D",
      "duration": 0
    },
    {
      "title": "should replace :dddd",
      "fullTitle": "middleware dates should replace :dddd",
      "duration": 0
    },
    {
      "title": "should replace :ddd",
      "fullTitle": "middleware dates should replace :ddd",
      "duration": 1
    },
    {
      "title": "should replace :dd",
      "fullTitle": "middleware dates should replace :dd",
      "duration": 0
    },
    {
      "title": "should replace :d",
      "fullTitle": "middleware dates should replace :d",
      "duration": 0
    },
    {
      "title": "should replace :hour",
      "fullTitle": "middleware dates should replace :hour",
      "duration": 1
    },
    {
      "title": "should replace :HH",
      "fullTitle": "middleware dates should replace :HH",
      "duration": 0
    },
    {
      "title": "should replace :H",
      "fullTitle": "middleware dates should replace :H",
      "duration": 0
    },
    {
      "title": "should replace :hh",
      "fullTitle": "middleware dates should replace :hh",
      "duration": 1
    },
    {
      "title": "should replace :h",
      "fullTitle": "middleware dates should replace :h",
      "duration": 0
    },
    {
      "title": "should replace :minute",
      "fullTitle": "middleware dates should replace :minute",
      "duration": 0
    },
    {
      "title": "should replace :min",
      "fullTitle": "middleware dates should replace :min",
      "duration": 0
    },
    {
      "title": "should replace :mm",
      "fullTitle": "middleware dates should replace :mm",
      "duration": 0
    },
    {
      "title": "should replace :m",
      "fullTitle": "middleware dates should replace :m",
      "duration": 0
    },
    {
      "title": "should replace :second",
      "fullTitle": "middleware dates should replace :second",
      "duration": 0
    },
    {
      "title": "should replace :sec",
      "fullTitle": "middleware dates should replace :sec",
      "duration": 0
    },
    {
      "title": "should replace :ss",
      "fullTitle": "middleware dates should replace :ss",
      "duration": 0
    },
    {
      "title": "should replace :s",
      "fullTitle": "middleware dates should replace :s",
      "duration": 0
    },
    {
      "title": "should replace :A",
      "fullTitle": "middleware dates should replace :A",
      "duration": 0
    },
    {
      "title": "should replace :a",
      "fullTitle": "middleware dates should replace :a",
      "duration": 0
    },
    {
      "title": "should replace :P",
      "fullTitle": "middleware dates should replace :P",
      "duration": 0
    },
    {
      "title": "should replace :p",
      "fullTitle": "middleware dates should replace :p",
      "duration": 0
    },
    {
      "title": "should replace :basename",
      "fullTitle": "middleware paths should replace :basename",
      "duration": 0
    },
    {
      "title": "should replace :filename",
      "fullTitle": "middleware paths should replace :filename",
      "duration": 0
    },
    {
      "title": "should replace :ext",
      "fullTitle": "middleware paths should replace :ext",
      "duration": 0
    },
    {
      "title": "should replace dir",
      "fullTitle": "middleware paths should replace dir",
      "duration": 0
    },
    {
      "title": "should replace :basename and slugify",
      "fullTitle": "middleware paths-slugify should replace :basename and slugify",
      "duration": 1
    },
    {
      "title": "should replace :filename and slugify",
      "fullTitle": "middleware paths-slugify should replace :filename and slugify",
      "duration": 0
    },
    {
      "title": "should replace :ext and slugify",
      "fullTitle": "middleware paths-slugify should replace :ext and slugify",
      "duration": 0
    },
    {
      "title": "should replace :dir and slugify",
      "fullTitle": "middleware paths-slugify should replace :dir and slugify",
      "duration": 0
    },
    {
      "title": "should save the structure",
      "fullTitle": "strings structure should save the structure",
      "duration": 0
    },
    {
      "title": "should have an empty structure",
      "fullTitle": "strings structure should have an empty structure",
      "duration": 0
    },
    {
      "title": "should have an empty structure when options are passed in",
      "fullTitle": "strings structure should have an empty structure when options are passed in",
      "duration": 0
    },
    {
      "title": "should save the structure when options are passed in",
      "fullTitle": "strings structure should save the structure when options are passed in",
      "duration": 0
    },
    {
      "title": "should add middleware with use",
      "fullTitle": "strings middleware should add middleware with use",
      "duration": 0
    },
    {
      "title": "should add middleware with exclude",
      "fullTitle": "strings middleware should add middleware with exclude",
      "duration": 0
    },
    {
      "title": "should build context from middleware",
      "fullTitle": "strings middleware should build context from middleware",
      "duration": 1
    },
    {
      "title": "should build context from middleware with exclusions",
      "fullTitle": "strings middleware should build context from middleware with exclusions",
      "duration": 0
    },
    {
      "title": "should add middleware with use as object",
      "fullTitle": "strings middleware should add middleware with use as object",
      "duration": 0
    },
    {
      "title": "should add middleware with exclude as object",
      "fullTitle": "strings middleware should add middleware with exclude as object",
      "duration": 0
    },
    {
      "title": "should add middlware with exclude as array",
      "fullTitle": "strings middleware should add middlware with exclude as array",
      "duration": 0
    },
    {
      "title": "should build the final string with no exclusions",
      "fullTitle": "strings run should build the final string with no exclusions",
      "duration": 1
    },
    {
      "title": "should build the final string with exclusions",
      "fullTitle": "strings run should build the final string with exclusions",
      "duration": 0
    },
    {
      "title": "should build the final string from a one time setup",
      "fullTitle": "strings run should build the final string from a one time setup",
      "duration": 0
    },
    {
      "title": "should replace :protocol",
      "fullTitle": "middleware urls should replace :protocol",
      "duration": 0
    },
    {
      "title": "should replace :protocol and slugify",
      "fullTitle": "middleware urls-slugify should replace :protocol and slugify",
      "duration": 0
    }
  ],
  "failures": [],
  "passes": [
    {
      "title": "should replace :date",
      "fullTitle": "middleware dates should replace :date",
      "duration": 2
    },
    {
      "title": "should replace :date and :ext",
      "fullTitle": "middleware dates should replace :date and :ext",
      "duration": 1
    },
    {
      "title": "should replace :L",
      "fullTitle": "middleware dates should replace :L",
      "duration": 0
    },
    {
      "title": "should replace :1",
      "fullTitle": "middleware dates should replace :1",
      "duration": 1
    },
    {
      "title": "should replace :year",
      "fullTitle": "middleware dates should replace :year",
      "duration": 1
    },
    {
      "title": "should replace :YYYY",
      "fullTitle": "middleware dates should replace :YYYY",
      "duration": 0
    },
    {
      "title": "should replace :YY",
      "fullTitle": "middleware dates should replace :YY",
      "duration": 0
    },
    {
      "title": "should replace :monthname",
      "fullTitle": "middleware dates should replace :monthname",
      "duration": 0
    },
    {
      "title": "should replace :MMMM",
      "fullTitle": "middleware dates should replace :MMMM",
      "duration": 0
    },
    {
      "title": "should replace :MMM",
      "fullTitle": "middleware dates should replace :MMM",
      "duration": 0
    },
    {
      "title": "should replace :month",
      "fullTitle": "middleware dates should replace :month",
      "duration": 0
    },
    {
      "title": "should replace :MM",
      "fullTitle": "middleware dates should replace :MM",
      "duration": 0
    },
    {
      "title": "should replace :mo",
      "fullTitle": "middleware dates should replace :mo",
      "duration": 0
    },
    {
      "title": "should replace :M",
      "fullTitle": "middleware dates should replace :M",
      "duration": 0
    },
    {
      "title": "should replace :DDDD",
      "fullTitle": "middleware dates should replace :DDDD",
      "duration": 0
    },
    {
      "title": "should replace :DDD",
      "fullTitle": "middleware dates should replace :DDD",
      "duration": 1
    },
    {
      "title": "should replace :day",
      "fullTitle": "middleware dates should replace :day",
      "duration": 0
    },
    {
      "title": "should replace :DD",
      "fullTitle": "middleware dates should replace :DD",
      "duration": 0
    },
    {
      "title": "should replace :D",
      "fullTitle": "middleware dates should replace :D",
      "duration": 0
    },
    {
      "title": "should replace :dddd",
      "fullTitle": "middleware dates should replace :dddd",
      "duration": 0
    },
    {
      "title": "should replace :ddd",
      "fullTitle": "middleware dates should replace :ddd",
      "duration": 1
    },
    {
      "title": "should replace :dd",
      "fullTitle": "middleware dates should replace :dd",
      "duration": 0
    },
    {
      "title": "should replace :d",
      "fullTitle": "middleware dates should replace :d",
      "duration": 0
    },
    {
      "title": "should replace :hour",
      "fullTitle": "middleware dates should replace :hour",
      "duration": 1
    },
    {
      "title": "should replace :HH",
      "fullTitle": "middleware dates should replace :HH",
      "duration": 0
    },
    {
      "title": "should replace :H",
      "fullTitle": "middleware dates should replace :H",
      "duration": 0
    },
    {
      "title": "should replace :hh",
      "fullTitle": "middleware dates should replace :hh",
      "duration": 1
    },
    {
      "title": "should replace :h",
      "fullTitle": "middleware dates should replace :h",
      "duration": 0
    },
    {
      "title": "should replace :minute",
      "fullTitle": "middleware dates should replace :minute",
      "duration": 0
    },
    {
      "title": "should replace :min",
      "fullTitle": "middleware dates should replace :min",
      "duration": 0
    },
    {
      "title": "should replace :mm",
      "fullTitle": "middleware dates should replace :mm",
      "duration": 0
    },
    {
      "title": "should replace :m",
      "fullTitle": "middleware dates should replace :m",
      "duration": 0
    },
    {
      "title": "should replace :second",
      "fullTitle": "middleware dates should replace :second",
      "duration": 0
    },
    {
      "title": "should replace :sec",
      "fullTitle": "middleware dates should replace :sec",
      "duration": 0
    },
    {
      "title": "should replace :ss",
      "fullTitle": "middleware dates should replace :ss",
      "duration": 0
    },
    {
      "title": "should replace :s",
      "fullTitle": "middleware dates should replace :s",
      "duration": 0
    },
    {
      "title": "should replace :A",
      "fullTitle": "middleware dates should replace :A",
      "duration": 0
    },
    {
      "title": "should replace :a",
      "fullTitle": "middleware dates should replace :a",
      "duration": 0
    },
    {
      "title": "should replace :P",
      "fullTitle": "middleware dates should replace :P",
      "duration": 0
    },
    {
      "title": "should replace :p",
      "fullTitle": "middleware dates should replace :p",
      "duration": 0
    },
    {
      "title": "should replace :basename",
      "fullTitle": "middleware paths should replace :basename",
      "duration": 0
    },
    {
      "title": "should replace :filename",
      "fullTitle": "middleware paths should replace :filename",
      "duration": 0
    },
    {
      "title": "should replace :ext",
      "fullTitle": "middleware paths should replace :ext",
      "duration": 0
    },
    {
      "title": "should replace dir",
      "fullTitle": "middleware paths should replace dir",
      "duration": 0
    },
    {
      "title": "should replace :basename and slugify",
      "fullTitle": "middleware paths-slugify should replace :basename and slugify",
      "duration": 1
    },
    {
      "title": "should replace :filename and slugify",
      "fullTitle": "middleware paths-slugify should replace :filename and slugify",
      "duration": 0
    },
    {
      "title": "should replace :ext and slugify",
      "fullTitle": "middleware paths-slugify should replace :ext and slugify",
      "duration": 0
    },
    {
      "title": "should replace :dir and slugify",
      "fullTitle": "middleware paths-slugify should replace :dir and slugify",
      "duration": 0
    },
    {
      "title": "should save the structure",
      "fullTitle": "strings structure should save the structure",
      "duration": 0
    },
    {
      "title": "should have an empty structure",
      "fullTitle": "strings structure should have an empty structure",
      "duration": 0
    },
    {
      "title": "should have an empty structure when options are passed in",
      "fullTitle": "strings structure should have an empty structure when options are passed in",
      "duration": 0
    },
    {
      "title": "should save the structure when options are passed in",
      "fullTitle": "strings structure should save the structure when options are passed in",
      "duration": 0
    },
    {
      "title": "should add middleware with use",
      "fullTitle": "strings middleware should add middleware with use",
      "duration": 0
    },
    {
      "title": "should add middleware with exclude",
      "fullTitle": "strings middleware should add middleware with exclude",
      "duration": 0
    },
    {
      "title": "should build context from middleware",
      "fullTitle": "strings middleware should build context from middleware",
      "duration": 1
    },
    {
      "title": "should build context from middleware with exclusions",
      "fullTitle": "strings middleware should build context from middleware with exclusions",
      "duration": 0
    },
    {
      "title": "should add middleware with use as object",
      "fullTitle": "strings middleware should add middleware with use as object",
      "duration": 0
    },
    {
      "title": "should add middleware with exclude as object",
      "fullTitle": "strings middleware should add middleware with exclude as object",
      "duration": 0
    },
    {
      "title": "should add middlware with exclude as array",
      "fullTitle": "strings middleware should add middlware with exclude as array",
      "duration": 0
    },
    {
      "title": "should build the final string with no exclusions",
      "fullTitle": "strings run should build the final string with no exclusions",
      "duration": 1
    },
    {
      "title": "should build the final string with exclusions",
      "fullTitle": "strings run should build the final string with exclusions",
      "duration": 0
    },
    {
      "title": "should build the final string from a one time setup",
      "fullTitle": "strings run should build the final string from a one time setup",
      "duration": 0
    },
    {
      "title": "should replace :protocol",
      "fullTitle": "middleware urls should replace :protocol",
      "duration": 0
    },
    {
      "title": "should replace :protocol and slugify",
      "fullTitle": "middleware urls-slugify should replace :protocol and slugify",
      "duration": 0
    }
  ]
}